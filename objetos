//  Tatiana Ramirez, Esteban Peña 
public class Usuarios {
    public static int NRO_USUARIOS = 10;
    public static Usuario[] usuarios = new Usuario[NRO_USUARIOS]; // Array de objetos Usuario
    public static int ProximosUsuarios = 0;

    public static void main(String[] arg){
        agregarUsuario("Jose", 1430000);
        agregarUsuario("Ana", 1200000);
        agregarUsuario("Beatriz", 1800000);
        agregarUsuario("Alberto", 1100000);
        agregarUsuario("Daniel", 2000000);

        System.out.println("Usuarios sin ordenar:");
        imprimirTodos();

        ordenarUsuarios();

        System.out.println("\nUsuarios ordenados alfabéticamente:");
        imprimirTodos();

        // Ejemplo de borrado de usuario
        System.out.println("\nBorrando usuario en índice 2 (Beatriz):");
        int resultadoBorrado = borrarUsuario(2);
        if (resultadoBorrado == 1) {
            System.out.println("Usuario borrado exitosamente.");
            imprimirTodos();
        } else if (resultadoBorrado == -1) {
            System.out.println("El usuario en el índice especificado no existe.");
        } else {
            System.out.println("Índice de usuario fuera de rango.");
        }
    }

    public static int borrarUsuario(int indice){
        if ((indice >= 0) && (indice < NRO_USUARIOS)){
            if (indice >= ProximosUsuarios){
                return -1; // usuario inexistente
            }else{
                // Mover los objetos Usuario
                for (int i = indice + 1; i < ProximosUsuarios; i++){
                    usuarios[i-1]= usuarios[i];
                }
                usuarios[ProximosUsuarios - 1] = null; // Eliminar la referencia del último elemento
                ProximosUsuarios--;
                return 1;
            }
        }
        return 0; // Índice fuera de rango
    }

    public static void agregarUsuario(String name, float wage){
        if (ProximosUsuarios < NRO_USUARIOS){
            // Crear un nuevo objeto Usuario y asignarlo al array
            usuarios[ProximosUsuarios] = new Usuario(name, wage);
            ProximosUsuarios++;
        } else {
            System.out.println("Se alcanzó el número máximo de usuarios");
        }
    }

    public static void imprimirUsuario(int indice){
        if ((indice >= 0) && (indice < ProximosUsuarios)){
            System.out.println("* " + usuarios[indice].getNombre() + "  " + usuarios[indice].getSalario());
        }else{
            System.out.println("Índice de usuario erróneo");
        }
    }

    public static void imprimirTodos(){
        for (int i = 0; i < ProximosUsuarios; i++){
            imprimirUsuario(i);
        }
    }

    // El método escribirUsuario ahora toma un objeto Usuario directamente o se puede adaptar
    // Si queremos mantener la lógica de sobrescribir, sería así:
    public static int escribirUsuario(int indice, String nom, float suel){
        if ((indice >= 0) &&(indice < NRO_USUARIOS)){
            if (usuarios[indice] == null) { // Si no existe, lo creamos
                usuarios[indice] = new Usuario(nom, suel);
            } else { // Si ya existe, actualizamos sus propiedades
                usuarios[indice].setNombre(nom);
                usuarios[indice].setSalario(suel);
            }
            return 1;
        }else{
            return 0;
        }
    }

    // Método para ordenar alfabéticamente
    public static void ordenarUsuarios(){
        for (int i = 0; i < ProximosUsuarios - 1; i++){
            for (int j = 0; j < ProximosUsuarios - i - 1; j++){
                // Comparar los nombres de los objetos Usuario
                if (usuarios[j].getNombre().compareToIgnoreCase(usuarios[j+1].getNombre()) > 0){
                    // Intercambio de objetos Usuario completos
                    Usuario tempUsuario = usuarios[j];
                    usuarios[j] = usuarios[j+1];
                    usuarios[j+1] = tempUsuario;
                }
            }
        }
    }
}

// Clase Usuario
class Usuario {
    private String nombre;
    private float salario;

    // Constructor
    public Usuario(String nombre, float salario) {
        this.nombre = nombre;
        this.salario = salario;
    }

    // Métodos getters
    public String getNombre() {
        return nombre;
    }

    public float getSalario() {
        return salario;
    }

    // Métodos setters (si necesitas modificar el nombre o salario de un usuario existente)
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public void setSalario(float salario) {
        this.salario = salario;
    }
}
